(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"/Users/maxence/devbox/files/jukebox/public/js/actions/CurrentActions.js":[function(require,module,exports){
'use strict';

var AppDispatcher = require('../dispatcher/AppDispatcher');
var CurrentConstants = require('../constants/CurrentConstants');
var api = require('../utils/api');

var CurrentActions = {
  fetch: function () {
    api.current.get(function (err, track) {
      if (err) return console.error(err);
      CurrentActions.set(track);
    }.bind(this));
  },
  set: function (track) {
    AppDispatcher.handleViewAction({
      actionType: CurrentConstants.CURRENT_SET,
      data: track
    });
  },
  progress: function (perc) {
    AppDispatcher.handleViewAction({
      actionType: CurrentConstants.CURRENT_PROGRESS,
      data: perc
    });
  },
  voteNext: function() {
    api.current.post(function (err) {
      if (err) console.error(err);
    });
  },
  setVotes: function (votes) {
    AppDispatcher.handleViewAction({
      actionType: CurrentConstants.CURRENT_SET_VOTES,
      data: votes
    });
  },
};

module.exports = CurrentActions;



},{"../constants/CurrentConstants":"/Users/maxence/devbox/files/jukebox/public/js/constants/CurrentConstants.js","../dispatcher/AppDispatcher":"/Users/maxence/devbox/files/jukebox/public/js/dispatcher/AppDispatcher.js","../utils/api":"/Users/maxence/devbox/files/jukebox/public/js/utils/api.js"}],"/Users/maxence/devbox/files/jukebox/public/js/actions/HistoryActions.js":[function(require,module,exports){
'use strict';

var AppDispatcher = require('../dispatcher/AppDispatcher');
var HistoryConstants = require('../constants/HistoryConstants');
var api = require('../utils/api');

var HistoryActions = {
  fetch: function () {
    api.history.get(function (err, tracks) {
      if (err) return console.error(err);
      HistoryActions.set(tracks);
    }.bind(this));
  },
  set: function (tracks) {
    AppDispatcher.handleViewAction({
      actionType: HistoryConstants.HISTORY_SET,
      data: tracks
    });
  }
};

module.exports = HistoryActions;



},{"../constants/HistoryConstants":"/Users/maxence/devbox/files/jukebox/public/js/constants/HistoryConstants.js","../dispatcher/AppDispatcher":"/Users/maxence/devbox/files/jukebox/public/js/dispatcher/AppDispatcher.js","../utils/api":"/Users/maxence/devbox/files/jukebox/public/js/utils/api.js"}],"/Users/maxence/devbox/files/jukebox/public/js/actions/PlayerActions.js":[function(require,module,exports){
'use strict';

var AppDispatcher = require('../dispatcher/AppDispatcher');
var PlayerConstants = require('../constants/PlayerConstants');

var PlayerActions = {
  play: function () {
    AppDispatcher.handleViewAction({
      actionType: PlayerConstants.PLAYER_PLAY
    });
  },

  pause: function () {
    AppDispatcher.handleViewAction({
      actionType: PlayerConstants.PLAYER_PAUSE
    });
  },

  volume: function (perc) {
    AppDispatcher.handleViewAction({
      actionType: PlayerConstants.PLAYER_SET_VOLUME,
      data: perc
    });
  },

  reset: function (streamUrl) {
    AppDispatcher.handleViewAction({
      actionType: PlayerConstants.PLAYER_RESET,
      data: streamUrl
    });
  }
};

module.exports = PlayerActions;



},{"../constants/PlayerConstants":"/Users/maxence/devbox/files/jukebox/public/js/constants/PlayerConstants.js","../dispatcher/AppDispatcher":"/Users/maxence/devbox/files/jukebox/public/js/dispatcher/AppDispatcher.js"}],"/Users/maxence/devbox/files/jukebox/public/js/actions/SettingsActions.js":[function(require,module,exports){
'use strict';

var AppDispatcher = require('../dispatcher/AppDispatcher');
var SettingsConstants = require('../constants/SettingsConstants');

var SettingsActions = {
  load: function () {
    var settings = JSON.parse(localStorage.getItem('settings') || '{}');
    AppDispatcher.handleViewAction({
      actionType: SettingsConstants.SETTINGS_SET_ALL,
      data: settings
    });
  },
  set: function (setting, value) {
    AppDispatcher.handleViewAction({
      actionType: SettingsConstants.SETTINGS_SET,
      data: { setting: setting, value: value }
    });
  },
};

module.exports = SettingsActions;



},{"../constants/SettingsConstants":"/Users/maxence/devbox/files/jukebox/public/js/constants/SettingsConstants.js","../dispatcher/AppDispatcher":"/Users/maxence/devbox/files/jukebox/public/js/dispatcher/AppDispatcher.js"}],"/Users/maxence/devbox/files/jukebox/public/js/actions/TracklistActions.js":[function(require,module,exports){
'use strict';

var AppDispatcher = require('../dispatcher/AppDispatcher');
var TracklistConstants = require('../constants/TracklistConstants');
var api = require('../utils/api');

var TracklistActions = {
  fetch: function () {
    api.tracks.get(function (err, tracks) {
      if (err) return console.error(err);
      TracklistActions.set(tracks);
    }.bind(this));
  },
  set: function (tracks) {
    AppDispatcher.handleViewAction({
      actionType: TracklistConstants.TRACKLIST_SET,
      data: tracks
    });
  },
  add: function (trackUrl) {
    api.tracks.post({ url: trackUrl }, function (err, track) {
      if (err) return console.error(err);
      AppDispatcher.handleViewAction({
        actionType: TracklistConstants.TRACKLIST_ADD,
        data: track
      });
    }.bind(this));
  },
  remove: function (index) {
    AppDispatcher.handleViewAction({
      actionType: TracklistConstants.TRACKLIST_REMOVE,
      data: index
    });
  }
};

module.exports = TracklistActions;



},{"../constants/TracklistConstants":"/Users/maxence/devbox/files/jukebox/public/js/constants/TracklistConstants.js","../dispatcher/AppDispatcher":"/Users/maxence/devbox/files/jukebox/public/js/dispatcher/AppDispatcher.js","../utils/api":"/Users/maxence/devbox/files/jukebox/public/js/utils/api.js"}],"/Users/maxence/devbox/files/jukebox/public/js/components/App.jsx":[function(require,module,exports){
'use strict';
/* global socket */

var Header = require('./Header.jsx');
var Footer = require('./Footer.jsx');
var Current = require('./Current.jsx');
var Tracklist = require('./Tracklist.jsx');
var History = require('./History.jsx');
var Settings = require('./Settings.jsx');

var CurrentActions = require('../actions/CurrentActions');
var HistoryActions = require('../actions/HistoryActions');
var TracklistActions = require('../actions/TracklistActions');
var CurrentStore = require('../stores/CurrentStore');
var HistoryStore = require('../stores/HistoryStore');
var SettingsStore = require('../stores/SettingsStore');
var TracklistStore = require('../stores/TracklistStore');
var notify = require('../utils/notify');

module.exports = React.createClass({displayName: "exports",
  getInitialState: function () {
    return { view: 'current' };
  },
  componentDidMount: function () {
    // Stores listeners
    CurrentStore.addChangeListener(this._onChange);
    TracklistStore.addChangeListener(this._onChange);
    HistoryStore.addChangeListener(this._onChange);
    // Sockets listeners
    socket.on('current:progress', this._trackProgress);
    socket.on('current:new', this._newTrackPlaying);
    socket.on('current:votes', this._newVotesNext);
    socket.on('tracks:new', this._newTrackAdded);
    // Fetch init data
    CurrentActions.fetch();
    TracklistActions.fetch();
    HistoryActions.fetch();
  },
  componentWillUnmount: function() {
    CurrentStore.removeChangeListener(this._onChange);
    TracklistStore.removeChangeListener(this._onChange);
    HistoryStore.removeChangeListener(this._onChange);
  },
  _onChange: function () {
    this.forceUpdate();
  },
  _trackProgress: function (perc) {
    CurrentActions.progress(perc);
  },
  _newTrackPlaying: function () {
    if (SettingsStore.get('notify')) notify('New track playing');
    CurrentActions.fetch();
    TracklistActions.fetch();
    HistoryActions.fetch();
  },
  _newTrackAdded: function () {
    if (SettingsStore.get('notify')) notify('New track added to the tracklist');
    TracklistActions.fetch();
  },
  _newVotesNext: function () {
    if (SettingsStore.get('notify')) notify('New vote for next track');
    CurrentActions.fetch();
  },
  _submitVote: function () {
    CurrentActions.voteNext();
  },
  _submitTrack: function (trackUrl) {
    TracklistActions.add(trackUrl);
  },
  _navigate: function (view) {
    if (view in { current: 1, history: 1, settings: 1 }) {
      this.setState({ view: view });
    }
  },
  render: function () {
    var current = CurrentStore.get();
    var tracklist = TracklistStore.get();
    var history = HistoryStore.get();

    var mainView;
    if (this.state.view === 'current') {
      mainView = React.createElement("div", null, 
        React.createElement(Current, {track: current, onVote: this._submitVote}), 
        React.createElement(Tracklist, {tracks: tracklist, onTrackSubmit: this._submitTrack})
      );
    } else if (this.state.view === 'history') {
      mainView = React.createElement(History, {tracks: history, onTrackSubmit: this._submitTrack});
    } else if (this.state.view === 'settings') {
      mainView = React.createElement(Settings, null);
    }

    return (
      React.createElement("div", {className: "container"}, 
        React.createElement(Header, {onNavigate: this._navigate, view: this.state.view}), 
        mainView, 
        React.createElement(Footer, null)
      )
    );
  }
});



},{"../actions/CurrentActions":"/Users/maxence/devbox/files/jukebox/public/js/actions/CurrentActions.js","../actions/HistoryActions":"/Users/maxence/devbox/files/jukebox/public/js/actions/HistoryActions.js","../actions/TracklistActions":"/Users/maxence/devbox/files/jukebox/public/js/actions/TracklistActions.js","../stores/CurrentStore":"/Users/maxence/devbox/files/jukebox/public/js/stores/CurrentStore.js","../stores/HistoryStore":"/Users/maxence/devbox/files/jukebox/public/js/stores/HistoryStore.js","../stores/SettingsStore":"/Users/maxence/devbox/files/jukebox/public/js/stores/SettingsStore.js","../stores/TracklistStore":"/Users/maxence/devbox/files/jukebox/public/js/stores/TracklistStore.js","../utils/notify":"/Users/maxence/devbox/files/jukebox/public/js/utils/notify.js","./Current.jsx":"/Users/maxence/devbox/files/jukebox/public/js/components/Current.jsx","./Footer.jsx":"/Users/maxence/devbox/files/jukebox/public/js/components/Footer.jsx","./Header.jsx":"/Users/maxence/devbox/files/jukebox/public/js/components/Header.jsx","./History.jsx":"/Users/maxence/devbox/files/jukebox/public/js/components/History.jsx","./Settings.jsx":"/Users/maxence/devbox/files/jukebox/public/js/components/Settings.jsx","./Tracklist.jsx":"/Users/maxence/devbox/files/jukebox/public/js/components/Tracklist.jsx"}],"/Users/maxence/devbox/files/jukebox/public/js/components/Current.jsx":[function(require,module,exports){
'use strict';

var helpers = require('../utils/helpers');

module.exports = React.createClass({displayName: "exports",
  render: function () {
    var cx = React.addons.classSet;
    var iconClasses = cx({
      'fa': true,
      'fa-fw': true,
      'fa-2x': true,
      'fa-soundcloud': this.props.track.platform === 'soundcloud',
      'fa-youtube-play': this.props.track.platform === 'youtube'
    });

    var progress = { width: (this.props.track.progress || 0) + '%' };

    var content;
    if (this.props.track.title) {
      content = React.createElement("div", {className: "inner cover"}, 
        React.createElement("a", {href: this.props.track.url, target: "_blank"}, 
          React.createElement("i", {className: iconClasses}), 
          React.createElement("img", {src: this.props.track.cover, alt: "Cover"}), 
          React.createElement("div", {className: "progress"}, 
            React.createElement("div", {className: "progress-bar progress-bar-danger", style: progress})
          )
        ), 
        React.createElement("h2", {className: "cover-heading"}, this.props.track.title), 
        React.createElement("p", {className: "lead"}, this.props.track.artist, " • ", helpers.duration(this.props.track.duration)), 
        React.createElement("p", {className: "lead"}, 
          React.createElement("button", {className: "btn btn-default", onClick: this.props.onVote}, 
            React.createElement("i", {className: "fa fa-fast-forward"}), " ", this.props.track.votes.favorable, "/", this.props.track.votes.total
          )
        )
      );
    } else {
      content = React.createElement("div", {className: "inner cover"}, 
        React.createElement("h1", {className: "cover-heading"}, "Nothing playing...")
      );
    }

    return (
      React.createElement("div", {className: "row"}, 
        React.createElement("div", {className: "col-xs-12"}, 
          content
        )
      )
    );
  }
});



},{"../utils/helpers":"/Users/maxence/devbox/files/jukebox/public/js/utils/helpers.js"}],"/Users/maxence/devbox/files/jukebox/public/js/components/Footer.jsx":[function(require,module,exports){
'use strict';

module.exports = React.createClass({displayName: "exports",
  render: function () {
    var bookmarklet = 'javascript:(function(){var e=window.location.href;if(e.indexOf(\'soundcloud\')===-1&&e.indexOf(\'youtube\')===-1){return}var t=new XMLHttpRequest;var n=JSON.stringify({url:e});t.open(\'POST\',\'http://' + location.host + '/tracks\',true);t.setRequestHeader(\'Content-Type\',\'application/json\');t.onload=function(){if(t.readyState===4){if(t.status===200||t.status===201)alert(\'Added!\');else alert(\'Error!\')}};t.onerror=function(){console.error(t.statusText)};t.send(n)})()';
    return (
      React.createElement("div", {className: "row"}, 
        React.createElement("div", {className: "col-xs-12"}, 
          React.createElement("div", {className: "mastfoot"}, 
            React.createElement("div", {className: "inner"}, 
              React.createElement("p", null, "Always have some music playing at ", React.createElement("a", {href: "https://spotistic.com"}, "Spotistic"), ", by ", React.createElement("a", {href: "https://twitter.com/baptou12", target: "_blank"}, "@baptou12"), " & ", React.createElement("a", {href: "https://twitter.com/maxdec", target: "_blank"}, "@maxdec"), "."), 
              React.createElement("p", null, 
                React.createElement("a", {className: "boxed", href: bookmarklet}, "+ Add"), 
                "Drag and drop this to your bookmarks to easily add new tracks."
              )
            )
          )
        )
      )
    );
  }
});



},{}],"/Users/maxence/devbox/files/jukebox/public/js/components/Header.jsx":[function(require,module,exports){
'use strict';

var Slider = require('./Slider.jsx');
var PlayerActions = require('../actions/PlayerActions');
var SettingsActions = require('../actions/SettingsActions');
var PlayerStore = require('../stores/PlayerStore');
var SettingsStore = require('../stores/SettingsStore');

module.exports = React.createClass({displayName: "exports",
  componentDidMount: function () {
    PlayerStore.addChangeListener(this._onChange);
    PlayerActions.reset('/stream');
    if (SettingsStore.get('autoplay')) PlayerActions.play();
  },
  componentWillUnmount: function () {
    PlayerStore.removeChangeListener(this._onChange);
  },
  _onChange: function () {
    this.forceUpdate();
  },
  _setVolume: function (perc) {
    PlayerActions.volume(perc);
  },
  _play: function (event) {
    event.preventDefault();
    PlayerActions.play();
  },
  _pause: function (event) {
    event.preventDefault();
    PlayerActions.pause();
  },
  _navigate: function (view) {
    return function (event) {
      event.preventDefault();
      this.props.onNavigate(view);
    }.bind(this);
  },
  render: function () {
    var cx = React.addons.classSet;
    var volume = PlayerStore.getVolume();
    var playing = PlayerStore.isPlaying();
    var playBtn;
    if (playing) {
      playBtn = React.createElement("a", {href: true, onClick: this._pause}, React.createElement("i", {className: "fa fa-pause"}));
    } else {
      playBtn = React.createElement("a", {href: true, onClick: this._play}, React.createElement("i", {className: "fa fa-play"}));
    }

    return (
      React.createElement("div", {className: "row masthead"}, 
        React.createElement("div", {className: "col-xs-12"}, 
          React.createElement("ul", {className: "nav masthead-nav pull-right"}, 
            React.createElement("li", {className: "volume"}, 
              React.createElement("i", {className: "fa fa-volume-up"}), 
              React.createElement(Slider, {perc: volume, onChange: this._setVolume})
            ), 
            React.createElement("li", null, playBtn), 
            React.createElement("li", {className: cx({ active: this.props.view === 'current' })}, React.createElement("a", {href: true, onClick: this._navigate('current')}, "Playing")), 
            React.createElement("li", {className: cx({ active: this.props.view === 'history' })}, React.createElement("a", {href: true, onClick: this._navigate('history')}, "History")), 
            React.createElement("li", {className: cx({ active: this.props.view === 'settings' })}, React.createElement("a", {href: true, onClick: this._navigate('settings')}, React.createElement("i", {className: "fa fa-cogs"})))
          ), 
          React.createElement("h3", {className: "masthead-brand"}, "Jukebox"), 
          React.createElement("h3", {className: "fa fa-music"})
        )
      )
    );
  }
});



},{"../actions/PlayerActions":"/Users/maxence/devbox/files/jukebox/public/js/actions/PlayerActions.js","../actions/SettingsActions":"/Users/maxence/devbox/files/jukebox/public/js/actions/SettingsActions.js","../stores/PlayerStore":"/Users/maxence/devbox/files/jukebox/public/js/stores/PlayerStore.js","../stores/SettingsStore":"/Users/maxence/devbox/files/jukebox/public/js/stores/SettingsStore.js","./Slider.jsx":"/Users/maxence/devbox/files/jukebox/public/js/components/Slider.jsx"}],"/Users/maxence/devbox/files/jukebox/public/js/components/History.jsx":[function(require,module,exports){
'use strict';

var Track = require('./Track.jsx');

module.exports = React.createClass({displayName: "exports",
  render: function () {
    var rows = this.props.tracks.map(function (track, i) {
      track.id = i + 1;
      return React.createElement(Track, {key: i, track: track, fields: ['playedAt', 'title', 'artist', 'duration', 'again', 'icon']});
    }.bind(this));

    return (
      React.createElement("div", {className: "row tracklist"}, 
        React.createElement("div", {className: "col-md-8 col-md-offset-2"}, 
          React.createElement("h3", null, React.createElement("i", {className: "fa fa-music"}), " History"), 
          React.createElement("table", {className: "table table-hover"}, 
            React.createElement("thead", null, 
              React.createElement("tr", null, 
                React.createElement("th", null, "Played at"), 
                React.createElement("th", null, "Title"), 
                React.createElement("th", null, "Artist"), 
                React.createElement("th", null, "Duration"), 
                React.createElement("th", null, "Again"), 
                React.createElement("th", null, React.createElement("i", {className: "fa fa-fw"}))
              )
            ), 
            React.createElement("tbody", null, 
              rows
            )
          )
        )
      )
    );
  }
});



},{"./Track.jsx":"/Users/maxence/devbox/files/jukebox/public/js/components/Track.jsx"}],"/Users/maxence/devbox/files/jukebox/public/js/components/Settings.jsx":[function(require,module,exports){
'use strict';
/* global Notification */

var SettingsActions = require('../actions/SettingsActions');
var SettingsStore = require('../stores/SettingsStore');

module.exports = React.createClass({displayName: "exports",
  componentDidMount: function () {
    SettingsStore.addChangeListener(this._onChange);
  },
  componentWillUnmount: function () {
    SettingsStore.removeChangeListener(this._onChange);
  },
  _onChange: function () {
    this.forceUpdate();
  },
  _canNotify: function () {
    return ('Notification' in window);
  },
  _switchNotify: function () {
    if (!this._canNotify()) return;

    // We need to ask the user for permission
    if (Notification.permission === 'default') {
      Notification.requestPermission(function (permission) {
        // If the user is okay, let's create a notification
        if (permission === 'granted') {
          SettingsActions.set('notify', !SettingsStore.get('notify'));
        }
      });
    } else if (Notification.permission === 'granted') {
      SettingsActions.set('notify', !SettingsStore.get('notify'));
    }
  },
  _switchAutoplay: function () {
    SettingsActions.set('autoplay', !SettingsStore.get('autoplay'));
  },
  render: function () {
    return (
      React.createElement("div", {className: "row"}, 
        React.createElement("div", {className: "col-sm-6 col-sm-offset-3"}, 
          React.createElement("h2", null, "Settings"), 
          React.createElement("form", null, 
            React.createElement("p", null, 
              React.createElement("input", {type: "checkbox", value: "notify", checked: SettingsStore.get('notify'), onChange: this._switchNotify}), 
              React.createElement("i", {className: "fa fa-bell"}), " Notifications"
            ), 
            React.createElement("p", null, 
              React.createElement("input", {type: "checkbox", value: "autoplay", checked: SettingsStore.get('autoplay'), onChange: this._switchAutoplay}), 
              React.createElement("i", {className: "fa fa-music"}), " Autoplay"
            )
          )
        )
      )
    );
  }
});



},{"../actions/SettingsActions":"/Users/maxence/devbox/files/jukebox/public/js/actions/SettingsActions.js","../stores/SettingsStore":"/Users/maxence/devbox/files/jukebox/public/js/stores/SettingsStore.js"}],"/Users/maxence/devbox/files/jukebox/public/js/components/Slider.jsx":[function(require,module,exports){
'use strict';

module.exports = React.createClass({displayName: "exports",
  getInitialState: function () {
    return { perc: this.props.perc || 50 };
  },
  handleClick: function () {
    var sliderTotalWith = this.refs.slider.getDOMNode().offsetWidth;
    var perc = Math.round(100 * event.offsetX / sliderTotalWith);
    this.setState({ perc: perc });
    this.props.onChange(perc);
  },
  render: function () {
    var barStyle = {
      width: this.state.perc + '%'
    };

    return (
      React.createElement("div", {className: "slider progress", ref: "slider", onClick: this.handleClick}, 
        React.createElement("div", {className: "progress-bar", style: barStyle})
      )
    );
  }
});



},{}],"/Users/maxence/devbox/files/jukebox/public/js/components/Track.jsx":[function(require,module,exports){
'use strict';

var helpers = require('../utils/helpers');
var TracklistActions = require('../actions/TracklistActions');

module.exports = React.createClass({displayName: "exports",
  openUrl: function (event) {
    event.preventDefault();
    helpers.openExt(this.props.track.url);
  },
  _addTrack: function (event) {
    event.preventDefault();
    event.stopPropagation();
    TracklistActions.add(this.props.track.url);
  },
  render: function () {
    var cx = React.addons.classSet;
    var fields = this.props.fields || ['id', 'title', 'artist', 'duration', 'icon'];
    var track = this.props.track;

    var tds = fields.map(function (field, i) {
      var content;
      if (field === 'duration') {
        content = helpers.duration(track.duration);
      } else if (field === 'playedAt') {
        content = helpers.at(track.playedAt);
      } else if (field === 'again') {
        if (track.url) {
          content = React.createElement("a", {href: true, onClick: this._addTrack}, React.createElement("i", {className: "fa fa-fw fa-reply fa-flip-vertical"}));
        } else {
          content = '';
        }
      } else if (field === 'icon') {
        var iconClasses = cx({
          'fa': true,
          'fa-fw': true,
          'fa-soundcloud': track.platform === 'soundcloud',
          'fa-youtube-play': track.platform === 'youtube',
          'fa-upload': track.platform === 'file',
        });
        content = React.createElement("i", {className: iconClasses});
      } else {
        content = track[field];
      }

      return React.createElement("td", {key: i}, content);
    }.bind(this));

    return (
      React.createElement("tr", {onClick: this.openUrl}, 
        tds
      )
    );
  }
});



},{"../actions/TracklistActions":"/Users/maxence/devbox/files/jukebox/public/js/actions/TracklistActions.js","../utils/helpers":"/Users/maxence/devbox/files/jukebox/public/js/utils/helpers.js"}],"/Users/maxence/devbox/files/jukebox/public/js/components/Tracklist.jsx":[function(require,module,exports){
'use strict';

var helpers = require('../utils/helpers');
var Track = require('./Track.jsx');

module.exports = React.createClass({displayName: "exports",
  _addTrack: function (event) {
    event.preventDefault();
    var trackUrl = this.refs.trackUrl.getDOMNode().value.trim();
    if (!trackUrl) return;
    this.props.onTrackSubmit(trackUrl);
    this.refs.trackUrl.getDOMNode().value = '';
    return;
  },
  render: function () {
    var rows = this.props.tracks.map(function (track, i) {
      track.id = i + 1;
      return React.createElement(Track, {key: i, track: track, fields: ['id', 'title', 'artist', 'duration', 'icon']});
    }.bind(this));

    return (
      React.createElement("div", {className: "row tracklist"}, 
        React.createElement("div", {className: "col-md-6 col-md-offset-3"}, 
          React.createElement("h3", null, React.createElement("i", {className: "fa fa-music"}), " Tracklist"), 
          React.createElement("table", {className: "table table-hover"}, 
            React.createElement("thead", null, 
              React.createElement("tr", null, 
                React.createElement("th", null, "#"), 
                React.createElement("th", null, "Title"), 
                React.createElement("th", null, "Artist"), 
                React.createElement("th", null, "Duration"), 
                React.createElement("th", null, React.createElement("i", {className: "fa fa-fw"}))
              )
            ), 
            React.createElement("tbody", null, 
              rows, 
              React.createElement("tr", null, 
                React.createElement("td", {colSpan: "5"}, 
                  React.createElement("form", {onSubmit: this._addTrack}, 
                    React.createElement("div", {className: "input-group"}, 
                      React.createElement("span", {className: "input-group-addon"}, React.createElement("i", {className: "fa fa-plus"})), 
                      React.createElement("input", {type: "text", className: "form-control", ref: "trackUrl", placeholder: "https://soundcloud.com/ghoststoriesmixtape/ghost-stories-ghostface"})
                    )
                  )
                )
              )
            )
          )
        )
      )
    );
  }
});



},{"../utils/helpers":"/Users/maxence/devbox/files/jukebox/public/js/utils/helpers.js","./Track.jsx":"/Users/maxence/devbox/files/jukebox/public/js/components/Track.jsx"}],"/Users/maxence/devbox/files/jukebox/public/js/constants/CurrentConstants.js":[function(require,module,exports){
'use strict';

var keyMirror = window.ReactFlux.KeyMirror;

var CurrentConstants = keyMirror({
  CURRENT_SET: null,
  CURRENT_SET_VOTES: null,
  CURRENT_PROGRESS: null,
});

module.exports = CurrentConstants;



},{}],"/Users/maxence/devbox/files/jukebox/public/js/constants/HistoryConstants.js":[function(require,module,exports){
'use strict';

var keyMirror = window.ReactFlux.KeyMirror;

var HistoryConstants = keyMirror({
  HISTORY_SET: null,
});

module.exports = HistoryConstants;



},{}],"/Users/maxence/devbox/files/jukebox/public/js/constants/PlayerConstants.js":[function(require,module,exports){
'use strict';

var keyMirror = window.ReactFlux.KeyMirror;

var PlayerConstants = keyMirror({
  PLAYER_PLAY: null,
  PLAYER_PAUSE: null,
  PLAYER_SET_VOLUME: null,
  PLAYER_RESET: null,
});

module.exports = PlayerConstants;



},{}],"/Users/maxence/devbox/files/jukebox/public/js/constants/SettingsConstants.js":[function(require,module,exports){
'use strict';

var keyMirror = window.ReactFlux.KeyMirror;

var SettingsConstants = keyMirror({
  SETTINGS_SET: null,
  SETTINGS_SET_ALL: null
});

module.exports = SettingsConstants;



},{}],"/Users/maxence/devbox/files/jukebox/public/js/constants/TracklistConstants.js":[function(require,module,exports){
'use strict';

var keyMirror = window.ReactFlux.KeyMirror;

var TracklistConstants = keyMirror({
  TRACKLIST_SET: null,
  TRACKLIST_ADD: null,
  TRACKLIST_REMOVE: null,
});

module.exports = TracklistConstants;



},{}],"/Users/maxence/devbox/files/jukebox/public/js/dispatcher/AppDispatcher.js":[function(require,module,exports){
'use strict';

var Dispatcher = window.ReactFlux.Dispatcher;
var merge = window.ReactFlux.Merge;

var AppDispatcher = merge(Dispatcher.prototype, {

  /**
   * A bridge function between the views and the dispatcher, marking the action
   * as a view action.  Another variant here could be handleServerAction.
   * @param  {object} action The data coming from the view.
   */
  handleViewAction: function (action) {
    this.dispatch({
      source: 'VIEW_ACTION',
      action: action
    });
  }

});

module.exports = AppDispatcher;



},{}],"/Users/maxence/devbox/files/jukebox/public/js/main.jsx":[function(require,module,exports){
'use strict';
/* global io */

window.socket = io.connect();

var App = require('./components/App.jsx');

React.render(
  React.createElement(App, null),
  document.getElementById('app')
);



},{"./components/App.jsx":"/Users/maxence/devbox/files/jukebox/public/js/components/App.jsx"}],"/Users/maxence/devbox/files/jukebox/public/js/stores/CurrentStore.js":[function(require,module,exports){
'use strict';

var AppDispatcher = require('../dispatcher/AppDispatcher');
var CurrentConstants = require('../constants/CurrentConstants');

var EventEmitter = window.ReactFlux.EventEmitter;
var merge = window.ReactFlux.Merge;

var CurrentStore = merge(EventEmitter.prototype, {
  _current: {},

  /**
   * Get the current track.
   * @return {object}
   */
  get: function() {
    return this._current;
  },

  _set: function (track) {
    this._current = track;
  },

  _setVotes: function (nb) {
    if (!this._current || !this._current.votes) return;
    this._current.votes.favorable = nb;
  },

  _progress: function (perc) {
    this._current.progress = perc;
  },

  emitChange: function() {
    this.emit('change');
  },

  /**
   * @param {function} callback
   */
  addChangeListener: function(callback) {
    this.on('change', callback);
  },

  /**
   * @param {function} callback
   */
  removeChangeListener: function(callback) {
    this.removeListener('change', callback);
  }
});

// Register to handle all updates
CurrentStore.dispatchToken = AppDispatcher.register(function(payload) {
  var action = payload.action;

  switch(action.actionType) {
    case CurrentConstants.CURRENT_SET:
      CurrentStore._set(action.data);
      break;

    case CurrentConstants.CURRENT_SET_VOTES:
      CurrentStore._setVotes(action.data);
      break;

    case CurrentConstants.CURRENT_PROGRESS:
      CurrentStore._progress(action.data);
      break;

    default:
      return true;
  }

  // This often goes in each case that should trigger a UI change. This store
  // needs to trigger a UI change after every view action, so we can make the
  // code less repetitive by putting it here.  We need the default case,
  // however, to make sure this only gets called after one of the cases above.
  CurrentStore.emitChange();

  return true; // No errors.  Needed by promise in Dispatcher.
});

module.exports = CurrentStore;



},{"../constants/CurrentConstants":"/Users/maxence/devbox/files/jukebox/public/js/constants/CurrentConstants.js","../dispatcher/AppDispatcher":"/Users/maxence/devbox/files/jukebox/public/js/dispatcher/AppDispatcher.js"}],"/Users/maxence/devbox/files/jukebox/public/js/stores/HistoryStore.js":[function(require,module,exports){
'use strict';

var AppDispatcher = require('../dispatcher/AppDispatcher');
var HistoryConstants = require('../constants/HistoryConstants');

var EventEmitter = window.ReactFlux.EventEmitter;
var merge = window.ReactFlux.Merge;

var HistoryStore = merge(EventEmitter.prototype, {
  _tracks: [],

  get: function() {
    return this._tracks;
  },

  _set: function (tracks) {
    this._tracks = tracks.sort(function (a, b) {
      return (new Date(b.playedAt) - new Date(a.playedAt));
    });
  },

  emitChange: function() {
    this.emit('change');
  },

  addChangeListener: function(callback) {
    this.on('change', callback);
  },

  removeChangeListener: function(callback) {
    this.removeListener('change', callback);
  }
});

HistoryStore.dispatchToken = AppDispatcher.register(function(payload) {
  var action = payload.action;

  switch(action.actionType) {
    case HistoryConstants.HISTORY_SET:
      HistoryStore._set(action.data);
      break;

    default:
      return true;
  }

  HistoryStore.emitChange();

  return true;
});

module.exports = HistoryStore;



},{"../constants/HistoryConstants":"/Users/maxence/devbox/files/jukebox/public/js/constants/HistoryConstants.js","../dispatcher/AppDispatcher":"/Users/maxence/devbox/files/jukebox/public/js/dispatcher/AppDispatcher.js"}],"/Users/maxence/devbox/files/jukebox/public/js/stores/PlayerStore.js":[function(require,module,exports){
'use strict';

var AppDispatcher = require('../dispatcher/AppDispatcher');
var PlayerConstants = require('../constants/PlayerConstants');

var EventEmitter = window.ReactFlux.EventEmitter;
var merge = window.ReactFlux.Merge;

var PlayerStore = merge(EventEmitter.prototype, {
  _audio: {},

  isPlaying: function () {
    return !!this._playing;
  },

  getVolume: function () {
    return this._audio.volume * 100;
  },

  _reset: function (streamUrl) {
    this._streamUrl = streamUrl || this._streamUrl;
    this._audio = new Audio(this._streamUrl);
    this._audio.volume = 0.5;
    this._playing = false;
    this._attachEvents();
    this._play();
  },

  _play: function () {
    this._audio.play();
  },

  _pause: function () {
    this._audio.pause();
  },

  _setVolume: function (perc) {
    if (typeof perc === 'number') this._audio.volume = perc / 100;
  },

  _attachEvents: function () {
    this._audio.addEventListener('error', function onError(err) {
      console.error('Player error', err);
      this._reset(this.streamUrl);
    }.bind(this));

    this._audio.addEventListener('pause', function onPause() {
      this._playing = false;
    }.bind(this));

    this._audio.addEventListener('playing', function onPlaying() {
      this._playing = true;
    }.bind(this));
  },

  emitChange: function() {
    this.emit('change');
  },

  /**
   * @param {function} callback
   */
  addChangeListener: function(callback) {
    this.on('change', callback);
  },

  /**
   * @param {function} callback
   */
  removeChangeListener: function(callback) {
    this.removeListener('change', callback);
  }
});

// Register to handle all updates
PlayerStore.dispatchToken = AppDispatcher.register(function(payload) {
  var action = payload.action;

  switch (action.actionType) {
    case PlayerConstants.PLAY:
      PlayerStore._play();
      break;

    case PlayerConstants.PAUSE:
      PlayerStore._pause();
      break;

    case PlayerConstants.SET_VOLUME:
      PlayerStore._setVolume(action.data);
      break;

    case PlayerConstants.RESET:
      PlayerStore._reset(action.data);
      break;

    default:
      return true;
  }

  // This often goes in each case that should trigger a UI change. This store
  // needs to trigger a UI change after every view action, so we can make the
  // code less repetitive by putting it here.  We need the default case,
  // however, to make sure this only gets called after one of the cases above.
  PlayerStore.emitChange();

  return true; // No errors.  Needed by promise in Dispatcher.
});

module.exports = PlayerStore;



},{"../constants/PlayerConstants":"/Users/maxence/devbox/files/jukebox/public/js/constants/PlayerConstants.js","../dispatcher/AppDispatcher":"/Users/maxence/devbox/files/jukebox/public/js/dispatcher/AppDispatcher.js"}],"/Users/maxence/devbox/files/jukebox/public/js/stores/SettingsStore.js":[function(require,module,exports){
'use strict';

var AppDispatcher = require('../dispatcher/AppDispatcher');
var SettingsConstants = require('../constants/SettingsConstants');

var EventEmitter = window.ReactFlux.EventEmitter;
var merge = window.ReactFlux.Merge;

var SettingsStore = merge(EventEmitter.prototype, {
  _defaults: { notify: false, autoplay: false },
  _settings: JSON.parse(localStorage.getItem('settings') || '{}'),

  get: function (setting) {
    return this._settings[setting] || this._defaults[setting];
  },

  getAll: function () {
    return merge(this._defaults, this._settings);
  },

  _set: function (setting, value) {
    this._settings[setting] = value;
  },

  _setAll: function (settings) {
    Object.keys(settings).forEach(function (key) {
      this._set(key, settings[key]);
    }.bind(this));
  },

  emitChange: function () {
    this.emit('change');
  },

  addChangeListener: function(callback) {
    this.on('change', callback);
  },

  removeChangeListener: function(callback) {
    this.removeListener('change', callback);
  }
});

SettingsStore.dispatchToken = AppDispatcher.register(function(payload) {
  var action = payload.action;

  switch(action.actionType) {
    case SettingsConstants.SETTINGS_SET:
      SettingsStore._set(action.data.setting, action.data.value);
      break;

    case SettingsConstants.SETTINGS_SET_ALL:
      SettingsStore._setAll(action.data);
      break;

    default:
      return true;
  }

  SettingsStore.emitChange();
  localStorage.setItem('settings', JSON.stringify(SettingsStore.getAll()));

  return true;
});

module.exports = SettingsStore;



},{"../constants/SettingsConstants":"/Users/maxence/devbox/files/jukebox/public/js/constants/SettingsConstants.js","../dispatcher/AppDispatcher":"/Users/maxence/devbox/files/jukebox/public/js/dispatcher/AppDispatcher.js"}],"/Users/maxence/devbox/files/jukebox/public/js/stores/TracklistStore.js":[function(require,module,exports){
'use strict';

var AppDispatcher = require('../dispatcher/AppDispatcher');
var TracklistConstants = require('../constants/TracklistConstants');

var EventEmitter = window.ReactFlux.EventEmitter;
var merge = window.ReactFlux.Merge;

var TracklistStore = merge(EventEmitter.prototype, {
  _tracks: [],

  get: function() {
    return this._tracks;
  },

  _set: function (tracks) {
    this._tracks = tracks;
  },

  _add: function (track) {
    this._tracks.push(track);
  },

  _remove: function (index) {
    return this._tracks.splice(index, 1);
  },

  emitChange: function() {
    this.emit('change');
  },

  addChangeListener: function(callback) {
    this.on('change', callback);
  },

  removeChangeListener: function(callback) {
    this.removeListener('change', callback);
  }
});

TracklistStore.dispatchToken = AppDispatcher.register(function(payload) {
  var action = payload.action;

  switch(action.actionType) {
    case TracklistConstants.TRACKLIST_SET:
      TracklistStore._set(action.data);
      break;

    case TracklistConstants.TRACKLIST_ADD:
      TracklistStore._add(action.data);
      break;

    case TracklistConstants.TRACKLIST_REMOVE:
      TracklistStore._remove(action.data);
      break;

    default:
      return true;
  }

  TracklistStore.emitChange();

  return true;
});

module.exports = TracklistStore;



},{"../constants/TracklistConstants":"/Users/maxence/devbox/files/jukebox/public/js/constants/TracklistConstants.js","../dispatcher/AppDispatcher":"/Users/maxence/devbox/files/jukebox/public/js/dispatcher/AppDispatcher.js"}],"/Users/maxence/devbox/files/jukebox/public/js/utils/api.js":[function(require,module,exports){
'use strict';

var api = {
  req: function (method, url, data, callback) {
    if (!callback) {
      callback = data;
      data = null;
    }

    $.ajax({
      url: url,
      dataType: 'json',
      data: data,
      type: method,
      success: function (data) {
        callback(null, data);
      },
      error: function (xhr, status, err) {
        callback(err);
      }
    });
  },
  player: {
    get: function (callback) {
      api.req('GET', '/player', callback);
    },
    post: function (callback) {
      api.req('POST', '/player', callback);
    },
    delete: function (callback) {
      api.req('DELETE', '/player', callback);
    }
  },
  tracks: {
    get: function (callback) {
      api.req('GET', '/tracks', callback);
    },
    post: function (track, callback) {
      api.req('POST', '/tracks', track, callback);
    }
  },
  current: {
    get: function (callback) {
      api.req('GET', '/current', callback);
    },
    post: function (callback) {
      api.req('POST', '/current', callback);
    },
    delete: function (callback) {
      api.req('DELETE', '/current', callback);
    }
  },
  history: {
    get: function (callback) {
      api.req('GET', '/history', callback);
    }
  }
};

module.exports = api;



},{}],"/Users/maxence/devbox/files/jukebox/public/js/utils/helpers.js":[function(require,module,exports){
'use strict';

module.exports = {
  duration: function (input) {
    var millisec = parseInt(input, 10);
    var s = Math.floor(millisec / 1000);
    var h = Math.floor(s / 3600);
    var m = Math.floor(s / 60) % 60;
    s = s % 60;

    // Formatting
    s = s < 10 ? '0' + s : s;
    m = m < 10 ? '0' + m : m;

    var result = '';
    if (h) result += h + ':';
    result += m + ':' + s;

    return result;
  },
  // 'dd/MM @ HH:mm'
  at: function (dateString) {
    var date = new Date(dateString);
    var day = date.getDate();
    day = (day < 10 ? '0' : '') + day;
    var month = date.getMonth();
    month = (month < 10 ? '0' : '') + month;
    var hours = date.getHours();
    hours = (hours < 10 ? '0' : '') + hours;
    var minutes = date.getMinutes();
    minutes = (minutes < 10 ? '0' : '') + minutes;

    return day + '/' + month + ' @ ' + hours + ':' + minutes;
  },
  openExt: function (url) {
    window.open(url, '_blank');
  }
};



},{}],"/Users/maxence/devbox/files/jukebox/public/js/utils/notify.js":[function(require,module,exports){
'use strict';
/* global Notification */

module.exports = function notify(title, body) {
  if (Notification.permission === 'granted') {
    var n = new Notification(title, {
      body: body,
      icon: '/jukebox.png'
    });
    setTimeout(function close() {
      n.close();
    }, 3000);
  }
};



},{}]},{},["/Users/maxence/devbox/files/jukebox/public/js/main.jsx"])
//# sourceMappingURL=data:application/json;base64,
